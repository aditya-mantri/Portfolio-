{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Iliyan\\\\Documents\\\\GitHub\\\\PortfolioWebsite\\\\Front-End\\\\src\\\\Containers\\\\Terminal\\\\Terminal.js\";\nimport React, { useState, Fragment, useEffect } from 'react';\nimport './Terminal.css';\nconst Terminal = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _s = $RefreshSig$();\n\n  return _s(props => {\n    _s();\n\n    const [getTerLine, setTerLine] = useState({\n      Value: \"iliyan@dimitrov:~$ â–®\",\n      blink: true\n    });\n\n    const setLine = data => {\n      console.log(\"Entered setline\");\n      setTerLine({\n        Value: \"iliyan@dimitrov:~$ \" + data,\n        blink: true\n      });\n    };\n\n    let [count, setCount] = useState({\n      index: 0,\n      classes: Array(9).fill(\"display\")\n    });\n\n    const N = () => {\n      return /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 39\n        }, this), \"\\u2800\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 29\n      }, this);\n    };\n\n    const starterArr = [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Iliyan Dimitrov\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"This is a Fully Interactive Portfolio Page with a Simulated Linux Terminal\", N()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"To Explore the Portfolio Either \", /*#__PURE__*/_jsxDEV(\"u\", {\n        children: \"Use the Header Buttons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 45\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Or \", /*#__PURE__*/_jsxDEV(\"u\", {\n        children: \"Type into the Command Promt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 16\n      }, this), N()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"To Begin Type:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[1] or [open aboutMe]: Opens about me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[2] or [open experience]: Opens my previous work experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[3] or [open work]: Opens previous projects on GitHub\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[4] or [run contactMe]: Runs contact me program in terminal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[5] or [run snakeGame]: Runs the terminal snake game\", N()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }, this)]; //const [count,getCount] = useState(starterArr.length);\n\n    let [content, setContent] = useState({\n      arr: starterArr\n    });\n    useEffect(() => {\n      let element = document.getElementById(\"command-line\");\n\n      if (element !== null) {\n        element.scrollIntoView();\n      }\n    }, [content.arr]);\n\n    const updateTerminalLine = e => {\n      clearTimeout(timeoutID);\n      setTerLine({\n        Value: \"iliyan@dimitrov:~$ \" + parseString(e.target.value),\n        blink: true\n      });\n    };\n\n    const updateContent = e => {\n      if (e !== undefined) e.preventDefault();\n      clearTimeout(timeoutID);\n      parseCommand(parseString());\n      setTerLine({\n        Value: \"iliyan@dimitrov:~$ \",\n        blink: true\n      });\n    };\n\n    const parseCommand = command => {\n      clearTimeout(timeoutID);\n      let commandSelector = command.split(\" \");\n      let tempArr = [...content.arr];\n      tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"iliyan@dimitrov:~$ \", parseString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }, this));\n\n      switch (commandSelector[0]) {\n        case \"\":\n          {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"iliyan@dimitrov:~$ \", parseString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 30\n            }, this));\n            break;\n          }\n\n        case \"clear\":\n          {\n            if (commandSelector.length <= 1) {\n              setContent({\n                arr: starterArr\n              });\n              return null;\n            } else {\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"iliyan@dimitrov:~$ \", parseString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 34\n              }, this));\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Unknown Argument: \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 75\n                }, this), \"\\u2800\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 34\n              }, this));\n            }\n\n            break;\n          }\n\n        case \"help\":\n          {\n            if (commandSelector.length <= 1) {\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800clear: clears command window\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 34\n              }, this));\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800ls: list all files\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 34\n              }, this));\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800run [argument]: run a specific program\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 34\n              }, this));\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800open [argument]: open a specific document\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 85\n                }, this), \"\\u2800\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 34\n              }, this));\n            } else {\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Unknown Argument: \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 75\n                }, this), \"\\u2800\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 34\n              }, this));\n            }\n\n            break;\n          }\n\n        case \"ls\":\n          {\n            if (commandSelector.length <= 1) {\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800File: aboutMe\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 34\n              }, this));\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800File: experience\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 34\n              }, this));\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800File: work\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 34\n              }, this));\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800Program: snakeGame\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 62\n                }, this), \"\\u2800\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 34\n              }, this));\n            } else {\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Unknown Argument: \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 75\n                }, this), \"\\u2800\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 34\n              }, this));\n            }\n\n            break;\n          }\n\n        case \"1\":\n          {\n            getTerLine.Value = \"iliyan@dimitrov:~$ open aboutMe\";\n            return parseCommand(\"open aboutMe\");\n          }\n\n        case \"2\":\n          {\n            getTerLine.Value = \"iliyan@dimitrov:~$ open experience\";\n            return parseCommand(\"open experience\");\n          }\n\n        case \"3\":\n          {\n            getTerLine.Value = \"iliyan@dimitrov:~$ open work\";\n            return parseCommand(\"open work\");\n          }\n\n        case \"4\":\n          {\n            getTerLine.Value = \"iliyan@dimitrov:~$ run contactMe\";\n            return parseCommand(\"run contactMe\");\n          }\n\n        case \"5\":\n          {\n            getTerLine.Value = \"iliyan@dimitrov:~$ run snakeGame\";\n            return parseCommand(\"run snakeGame\");\n          }\n\n        case \"run\":\n          {\n            if (commandSelector.length <= 1) tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Error Expected Argument run [argument]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 75\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 34\n            }, this));else {\n              tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Running Program: \", commandSelector[1], \" ...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 78\n                }, this), \"\\u2800\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 34\n              }, this));\n            }\n            break;\n          }\n\n        case \"open\":\n          {\n            if (commandSelector.length <= 1) tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Error Expected Argument open [argument]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 76\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 34\n            }, this));else {\n              switch (commandSelector[1]) {\n                case \"aboutMe\":\n                  {\n                    if (props.addTab(\"About\")) tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Opening File: \", commandSelector[1], \" ...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 159,\n                        columnNumber: 87\n                      }, this), \"\\u2800\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 159,\n                      columnNumber: 46\n                    }, this));else tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"File \", commandSelector[1], \" is already open\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 161,\n                        columnNumber: 90\n                      }, this), \"\\u2800\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 161,\n                      columnNumber: 46\n                    }, this));\n                    break;\n                  }\n\n                case \"experience\":\n                  {\n                    if (props.addTab(\"Experience\")) tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Opening File: \", commandSelector[1], \" ...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 168,\n                        columnNumber: 87\n                      }, this), \"\\u2800\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 46\n                    }, this));else tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"File \", commandSelector[1], \" is already open\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 170,\n                        columnNumber: 90\n                      }, this), \"\\u2800\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 46\n                    }, this));\n                    break;\n                  }\n\n                case \"work\":\n                  {\n                    if (props.addTab(\"Work\")) tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Opening File: \", commandSelector[1], \" ...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 177,\n                        columnNumber: 87\n                      }, this), \"\\u2800\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 46\n                    }, this));else tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"File \", commandSelector[1], \" is already open\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 179,\n                        columnNumber: 90\n                      }, this), \"\\u2800\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 179,\n                      columnNumber: 46\n                    }, this));\n                    break;\n                  }\n\n                default:\n                  {\n                    tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Couldn't Find file: \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 185,\n                        columnNumber: 85\n                      }, this), \"\\u2800\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 185,\n                      columnNumber: 42\n                    }, this));\n                    break;\n                  }\n              }\n            }\n            break;\n          }\n\n        default:\n          tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [parseString(), \" is not a recognized command\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 30\n          }, this));\n          tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Type \\\"help\\\" for list of commands\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 65\n            }, this), \"\\u2800\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 30\n          }, this));\n          break;\n      }\n\n      setContent({\n        arr: tempArr\n      });\n    };\n\n    const parseString = input => {\n      let bufferIndex = 19;\n      if (input !== undefined) return input.substring(bufferIndex).replaceAll(\"â–®\", \"\");else return getTerLine.Value.substring(bufferIndex).replaceAll(\"â–®\", \"\");\n    };\n\n    let timeoutID = setTimeout(() => {\n      if (getTerLine.blink) setTerLine({\n        Value: (getTerLine.Value + \"\").replaceAll(\"â–®\", \"\"),\n        blink: !getTerLine.blink\n      });else setTerLine({\n        Value: getTerLine.Value + \"â–®\",\n        blink: !getTerLine.blink\n      });\n    }, 800);\n    props.setTimeoutId(timeoutID);\n    let num = 0;\n\n    const allTerminalText = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"css-typing\",\n      children: content.arr.map(item => {\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: item\n        }, num++, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this);\n\n    let element = document.getElementById(\"command-line\");\n\n    if (element !== null) {\n      if (element !== document.activeElement) element.focus();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [allTerminalText, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: updateContent,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"command-line\",\n          type: \"text\",\n          autoFocus: true,\n          spellCheck: \"false\",\n          autoComplete: \"off\",\n          value: getTerLine.Value,\n          onChange: updateTerminalLine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2800\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this);\n  }, \"WhgQ3LSVp5xCLGTkiVDKPPN6/cA=\");\n});\nexport default Terminal;","map":{"version":3,"sources":["C:/Users/Iliyan/Documents/GitHub/PortfolioWebsite/Front-End/src/Containers/Terminal/Terminal.js"],"names":["React","useState","Fragment","useEffect","Terminal","forwardRef","props","ref","getTerLine","setTerLine","Value","blink","setLine","data","console","log","count","setCount","index","classes","Array","fill","N","starterArr","content","setContent","arr","element","document","getElementById","scrollIntoView","updateTerminalLine","e","clearTimeout","timeoutID","parseString","target","value","updateContent","undefined","preventDefault","parseCommand","command","commandSelector","split","tempArr","push","length","addTab","input","bufferIndex","substring","replaceAll","setTimeout","setTimeoutId","num","allTerminalText","map","item","activeElement","focus"],"mappings":"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","sourcesContent":["import React, {useState, Fragment, useEffect} from 'react';\r\nimport './Terminal.css'\r\nconst Terminal = React.forwardRef((props, ref) =>  ((props)=>{\r\n    const [getTerLine,setTerLine] = useState({Value:\"iliyan@dimitrov:~$ â–®\",blink:true});\r\n\r\n    const setLine = (data) => {\r\n        console.log(\"Entered setline\");\r\n        setTerLine({Value:\"iliyan@dimitrov:~$ \" + data,blink:true});\r\n    }\r\n    let[count,setCount]=useState({index:0,classes:Array(9).fill(\"display\")})\r\n\r\n    const N = () =>{return (<Fragment><br/>â €</Fragment>);}\r\n\r\n\r\n\r\n    const starterArr = [\r\n        (<h2>Iliyan Dimitrov</h2>),\r\n        (<h3>This is a Fully Interactive Portfolio Page with a Simulated Linux Terminal{N()}</h3>),\r\n\r\n        (<p>To Explore the Portfolio Either <u>Use the Header Buttons</u></p>),\r\n        (<p>Or <u>Type into the Command Promt</u>{N()}</p>),\r\n\r\n        (<p>To Begin Type:</p>),\r\n        (<p>â €â €â €â €â €â €â €[1] or [open aboutMe]: Opens about me</p>),\r\n        (<p>â €â €â €â €â €â €â €[2] or [open experience]: Opens my previous work experience</p>),\r\n        (<p>â €â €â €â €â €â €â €[3] or [open work]: Opens previous projects on GitHub</p>),\r\n        (<p>â €â €â €â €â €â €â €[4] or [run contactMe]: Runs contact me program in terminal</p>),\r\n        (<p>â €â €â €â €â €â €â €[5] or [run snakeGame]: Runs the terminal snake game{N()}</p>)\r\n    ]\r\n    //const [count,getCount] = useState(starterArr.length);\r\n\r\n    \r\n\r\n\r\n    let[content,setContent] = useState({\r\n        arr:starterArr\r\n    });\r\n    useEffect(()=>{\r\n        let element = document.getElementById(\"command-line\")\r\n        if(element !== null){\r\n            element.scrollIntoView();\r\n        }\r\n    },[content.arr])\r\n\r\n\r\n    const updateTerminalLine = (e) =>{\r\n        clearTimeout(timeoutID);\r\n        setTerLine({Value:(\"iliyan@dimitrov:~$ \"  + parseString(e.target.value)),blink:true});\r\n      \r\n    }\r\n\r\n    const updateContent =(e) =>{\r\n        if(e !== undefined)\r\n            e.preventDefault();\r\n\r\n        clearTimeout(timeoutID);\r\n        \r\n        parseCommand(parseString());\r\n\r\n        setTerLine({Value:\"iliyan@dimitrov:~$ \",blink:true});\r\n    }\r\n\r\n    const parseCommand = (command) =>{\r\n        clearTimeout(timeoutID);\r\n\r\n        let commandSelector = command.split(\" \")\r\n\r\n        let tempArr = [...content.arr];\r\n        tempArr.push(<p>iliyan@dimitrov:~$ {parseString()}</p>);\r\n\r\n        switch(commandSelector[0]){\r\n            case \"\":{\r\n                tempArr.push(<p>iliyan@dimitrov:~$ {parseString()}</p>);\r\n                break;\r\n            }\r\n\r\n            case \"clear\":{\r\n                if(commandSelector.length <= 1){\r\n                    setContent({arr:starterArr});\r\n                    return null;\r\n                }\r\n                else{\r\n                    tempArr.push(<p>iliyan@dimitrov:~$ {parseString()}</p>);\r\n                    tempArr.push(<p>Unknown Argument: {commandSelector[1]}<br/>â €</p>);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"help\":{\r\n                if(commandSelector.length <= 1){\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €clear: clears command window</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €ls: list all files</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €run [argument]: run a specific program</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €open [argument]: open a specific document<br/>â €</p>);\r\n                }\r\n                else{ \r\n                    tempArr.push(<p>Unknown Argument: {commandSelector[1]}<br/>â €</p>);                   \r\n                }\r\n                \r\n                break;\r\n            }\r\n\r\n            case \"ls\":{\r\n                if(commandSelector.length <= 1){\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €File: aboutMe</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €File: experience</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €File: work</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €Program: snakeGame<br/>â €</p>);\r\n                }\r\n                else{ \r\n                    tempArr.push(<p>Unknown Argument: {commandSelector[1]}<br/>â €</p>);                   \r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"1\":{\r\n                getTerLine.Value = \"iliyan@dimitrov:~$ open aboutMe\";\r\n                return parseCommand(\"open aboutMe\")\r\n            }\r\n\r\n            case \"2\":{\r\n                getTerLine.Value = \"iliyan@dimitrov:~$ open experience\";\r\n                return parseCommand(\"open experience\")\r\n             }\r\n\r\n             case \"3\":{\r\n                getTerLine.Value = \"iliyan@dimitrov:~$ open work\";\r\n                return parseCommand(\"open work\")\r\n             }\r\n\r\n             case \"4\":{\r\n                getTerLine.Value = \"iliyan@dimitrov:~$ run contactMe\";\r\n                return parseCommand(\"run contactMe\")\r\n             }\r\n\r\n             case \"5\":{\r\n                getTerLine.Value = \"iliyan@dimitrov:~$ run snakeGame\";\r\n                return parseCommand(\"run snakeGame\")\r\n             }\r\n            case \"run\":{\r\n                if(commandSelector.length <= 1)\r\n                    tempArr.push(<p>Error Expected Argument run [argument]<br/>â €</p>);\r\n\r\n                else{ \r\n                    tempArr.push(<p>Running Program: {commandSelector[1]} ...<br/>â €</p>);                   \r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"open\":{\r\n\r\n                if(commandSelector.length <= 1)\r\n                    tempArr.push(<p>Error Expected Argument open [argument]<br/>â €</p>);\r\n\r\n                else{ \r\n                    switch(commandSelector[1]){\r\n                        case \"aboutMe\":{\r\n                            if(props.addTab(\"About\"))\r\n                                tempArr.push(<p>Opening File: {commandSelector[1]} ...<br/>â €</p>);\r\n                            else\r\n                                tempArr.push(<p>File {commandSelector[1]} is already open<br/>â €</p>);\r\n                            \r\n                            break;\r\n                        }\r\n\r\n                        case \"experience\":{\r\n                            if(props.addTab(\"Experience\"))\r\n                                tempArr.push(<p>Opening File: {commandSelector[1]} ...<br/>â €</p>);\r\n                            else\r\n                                tempArr.push(<p>File {commandSelector[1]} is already open<br/>â €</p>);\r\n                            \r\n                            break;\r\n                        }\r\n\r\n                        case \"work\":{\r\n                            if(props.addTab(\"Work\"))\r\n                                tempArr.push(<p>Opening File: {commandSelector[1]} ...<br/>â €</p>);\r\n                            else\r\n                                tempArr.push(<p>File {commandSelector[1]} is already open<br/>â €</p>);\r\n                            \r\n                            break;\r\n                        }\r\n\r\n                        default:{\r\n                            tempArr.push(<p>Couldn't Find file: {commandSelector[1]}<br/>â €</p>);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                                       \r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                tempArr.push(<p>{parseString()} is not a recognized command</p>);\r\n                tempArr.push(<p>Type \"help\" for list of commands<br/>â €</p>);                \r\n                break;\r\n        }\r\n\r\n        setContent({arr:tempArr});\r\n    }\r\n\r\n    const parseString = (input)=>{\r\n        let bufferIndex = 19;\r\n        if(input !== undefined)\r\n            return input.substring(bufferIndex).replaceAll(\"â–®\",\"\");\r\n        else\r\n            return getTerLine.Value.substring(bufferIndex).replaceAll(\"â–®\",\"\");\r\n    }\r\n\r\n    let timeoutID = setTimeout(() =>{\r\n        if(getTerLine.blink)\r\n            setTerLine({Value:(getTerLine.Value + \"\").replaceAll(\"â–®\",\"\"),blink:!getTerLine.blink});\r\n        \r\n        else\r\n            setTerLine({Value: getTerLine.Value + (\"â–®\"),blink:!getTerLine.blink});\r\n        \r\n    },800);\r\n    props.setTimeoutId(timeoutID);\r\n\r\n\r\n    let num = 0;\r\n    const allTerminalText = (       \r\n        <div className=\"css-typing\">           \r\n            {content.arr.map((item)=>{\r\n                return <Fragment key={num++}>{item}</Fragment>;\r\n            })}\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n    let element = document.getElementById(\"command-line\")\r\n    if(element !== null){\r\n        if(element !== document.activeElement)\r\n            element.focus();\r\n    }\r\n\r\n \r\n\r\n    return (\r\n        <div id=\"main\">\r\n            {allTerminalText}\r\n            <form onSubmit={updateContent}>\r\n                <input id=\"command-line\" type=\"text\"  autoFocus spellCheck=\"false\" autoComplete=\"off\" value={getTerLine.Value} onChange={updateTerminalLine}/>     \r\n                <p>â €</p>  \r\n            </form>\r\n        </div>\r\n        \r\n    );\r\n\r\n    \r\n    }))\r\nexport default Terminal;"]},"metadata":{},"sourceType":"module"}
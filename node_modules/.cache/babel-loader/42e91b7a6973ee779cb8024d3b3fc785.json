{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Iliyan\\\\Documents\\\\GitHub\\\\PortfolioWebsite\\\\Front-End\\\\src\\\\Containers\\\\Terminal\\\\Terminal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport './Terminal.css';\n\nconst Terminal = props => {\n  _s();\n\n  const [getTerLine, setTerLine] = useState({\n    Value: \"iliyan@dimitrov:~$ â–®\",\n    blink: true\n  });\n\n  const N = () => {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 39\n      }, this), \"\\u2800\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 29\n    }, this);\n  };\n\n  const starterArr = [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Iliyan Dimitrov\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: [\"This is a Fully Interactive Portfolio Page with a Simulated Linux Terminal\", N()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"To Explore the Portfolio Either \", /*#__PURE__*/_jsxDEV(\"u\", {\n      children: \"Use the Header Buttons\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Or \", /*#__PURE__*/_jsxDEV(\"u\", {\n      children: \"Type into the Command Promt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this), N()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"To Begin Type:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[open aboutMe]: Will about me tab\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[open experience]: Will my previouse work experience tab\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[open work]: Will open previouse projects on GitHub\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 10\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800[run snakeGame]: Will run the terminal snake game\", N()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this)];\n  const [content, setContent] = useState({\n    arr: starterArr\n  });\n\n  const updateTerminalLine = e => {\n    clearTimeout(timeoutID);\n    setTerLine({\n      Value: \"iliyan@dimitrov:~$ \" + parseString(e.target.value),\n      blink: true\n    });\n  };\n\n  const updateContent = e => {\n    e.preventDefault();\n    clearTimeout(timeoutID);\n    setTerLine({\n      Value: \"iliyan@dimitrov:~$ \",\n      blink: true\n    });\n    parseCommand(parseString());\n  };\n\n  const parseCommand = command => {\n    let commandSelector = command.split(\" \");\n    let tempArr = [...content.arr];\n    tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"iliyan@dimitrov:~$ \", parseString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 22\n    }, this));\n\n    switch (commandSelector[0]) {\n      case \"\":\n        {\n          tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"iliyan@dimitrov:~$ \", parseString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 30\n          }, this));\n          break;\n        }\n\n      case \"clear\":\n        {\n          if (commandSelector.length <= 1) {\n            setContent({\n              arr: starterArr\n            });\n            return null;\n          } else {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"iliyan@dimitrov:~$ \", parseString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 34\n            }, this));\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Unknown Argument: \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 75\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 34\n            }, this));\n          }\n\n          break;\n        }\n\n      case \"help\":\n        {\n          if (commandSelector.length <= 1) {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800clear: clears command window\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 34\n            }, this));\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800ls: list all files\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 34\n            }, this));\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800run [argument]: run a specific program\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 34\n            }, this));\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800open [argument]: open a specific document\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 85\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 34\n            }, this));\n          } else {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Unknown Argument: \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 75\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 34\n            }, this));\n          }\n\n          break;\n        }\n\n      case \"ls\":\n        {\n          if (commandSelector.length <= 1) {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800File: aboutMe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 34\n            }, this));\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800File: experience\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 34\n            }, this));\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800File: work\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 34\n            }, this));\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800Program: snakeGame\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 62\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 34\n            }, this));\n          } else {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Unknown Argument: \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 75\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 34\n            }, this));\n          }\n\n          break;\n        }\n\n      case \"run\":\n        {\n          if (commandSelector.length <= 1) tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Error Expected Argument run [argument]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 75\n            }, this), \"\\u2800\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 34\n          }, this));else {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Running Program: \", commandSelector[1], \" ...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 78\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 34\n            }, this));\n          }\n          break;\n        }\n\n      case \"open\":\n        {\n          if (commandSelector.length <= 1) tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Error Expected Argument open [argument]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 76\n            }, this), \"\\u2800\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 34\n          }, this));else {\n            tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Opening File: \", commandSelector[1], \" ...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 75\n              }, this), \"\\u2800\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 34\n            }, this));\n          }\n          break;\n        }\n\n      default:\n        tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [parseString(), \" is not a recognized command\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 30\n        }, this));\n        tempArr.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type \\\"help\\\" for list of commands\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 65\n          }, this), \"\\u2800\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 30\n        }, this));\n        break;\n    }\n\n    setContent({\n      arr: tempArr\n    });\n  };\n\n  const parseString = input => {\n    let bufferIndex = 19;\n    if (input !== undefined) return input.substring(bufferIndex).replaceAll(\"â–®\", \"\");else return getTerLine.Value.substring(bufferIndex).replaceAll(\"â–®\", \"\");\n  };\n\n  let timeoutID = setTimeout(() => {\n    document.getElementById(\"command-line\").focus();\n    if (getTerLine.blink) setTerLine({\n      Value: (getTerLine.Value + \"\").replaceAll(\"â–®\", \"\"),\n      blink: !getTerLine.blink\n    });else setTerLine({\n      Value: getTerLine.Value + \"â–®\",\n      blink: !getTerLine.blink\n    });\n  }, 800);\n  let num = 0;\n\n  const allTerminalText = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: content.arr.map(item => {\n      return /*#__PURE__*/_jsxDEV(Fragment, {\n        children: item\n      }, num++, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    children: [allTerminalText, /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateContent,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"command-line\",\n        type: \"text\",\n        autoFocus: true,\n        spellCheck: \"false\",\n        autoComplete: \"off\",\n        value: getTerLine.Value,\n        onChange: updateTerminalLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Terminal, \"bWi/o/bFg5W0J2+xsMprcfUpT0I=\");\n\n_c = Terminal;\nexport default Terminal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"sources":["C:/Users/Iliyan/Documents/GitHub/PortfolioWebsite/Front-End/src/Containers/Terminal/Terminal.js"],"names":["React","useState","Fragment","Terminal","props","getTerLine","setTerLine","Value","blink","N","starterArr","content","setContent","arr","updateTerminalLine","e","clearTimeout","timeoutID","parseString","target","value","updateContent","preventDefault","parseCommand","command","commandSelector","split","tempArr","push","length","input","bufferIndex","undefined","substring","replaceAll","setTimeout","document","getElementById","focus","num","allTerminalText","map","item"],"mappings":"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","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport './Terminal.css'\r\nconst Terminal = (props) => {\r\n    const [getTerLine,setTerLine] = useState({Value:\"iliyan@dimitrov:~$ â–®\",blink:true});\r\n\r\n    const N = () =>{return (<Fragment><br/>â €</Fragment>);}\r\n    const starterArr = [\r\n        (<h2>Iliyan Dimitrov</h2>),\r\n        (<h3>This is a Fully Interactive Portfolio Page with a Simulated Linux Terminal{N()}</h3>),\r\n\r\n        (<p>To Explore the Portfolio Either <u>Use the Header Buttons</u></p>),\r\n        (<p>Or <u>Type into the Command Promt</u>{N()}</p>),\r\n\r\n        (<p>To Begin Type:</p>),\r\n        (<p>â €â €â €â €â €â €â €[open aboutMe]: Will about me tab</p>),\r\n        (<p>â €â €â €â €â €â €â €[open experience]: Will my previouse work experience tab</p>),\r\n        (<p>â €â €â €â €â €â €â €[open work]: Will open previouse projects on GitHub</p>),\r\n        (<p>â €â €â €â €â €â €â €[run snakeGame]: Will run the terminal snake game{N()}</p>)\r\n    ]\r\n    \r\n    const[content,setContent] = useState({\r\n        arr:starterArr\r\n    });\r\n\r\n    const updateTerminalLine = (e) =>{\r\n        clearTimeout(timeoutID);\r\n        setTerLine({Value:(\"iliyan@dimitrov:~$ \"  + parseString(e.target.value)),blink:true});\r\n      \r\n    }\r\n\r\n    const updateContent =(e) =>{\r\n        e.preventDefault();\r\n        clearTimeout(timeoutID);\r\n        setTerLine({Value:\"iliyan@dimitrov:~$ \",blink:true});\r\n        \r\n        parseCommand(parseString());\r\n        \r\n    }\r\n\r\n    const parseCommand = (command) =>{\r\n        let commandSelector = command.split(\" \")\r\n\r\n        let tempArr = [...content.arr];\r\n        tempArr.push(<p>iliyan@dimitrov:~$ {parseString()}</p>);\r\n\r\n        switch(commandSelector[0]){\r\n            case \"\":{\r\n                tempArr.push(<p>iliyan@dimitrov:~$ {parseString()}</p>);\r\n                break;\r\n            }\r\n\r\n            case \"clear\":{\r\n                if(commandSelector.length <= 1){\r\n                    setContent({arr:starterArr});\r\n                    return null;\r\n                }\r\n                else{\r\n                    tempArr.push(<p>iliyan@dimitrov:~$ {parseString()}</p>);\r\n                    tempArr.push(<p>Unknown Argument: {commandSelector[1]}<br/>â €</p>);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"help\":{\r\n                if(commandSelector.length <= 1){\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €clear: clears command window</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €ls: list all files</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €run [argument]: run a specific program</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €open [argument]: open a specific document<br/>â €</p>);\r\n                }\r\n                else{ \r\n                    tempArr.push(<p>Unknown Argument: {commandSelector[1]}<br/>â €</p>);                   \r\n                }\r\n                \r\n                break;\r\n            }\r\n\r\n            case \"ls\":{\r\n                if(commandSelector.length <= 1){\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €File: aboutMe</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €File: experience</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €File: work</p>);\r\n                    tempArr.push(<p>â €â €â €â €â €â €â €Program: snakeGame<br/>â €</p>);\r\n                }\r\n                else{ \r\n                    tempArr.push(<p>Unknown Argument: {commandSelector[1]}<br/>â €</p>);                   \r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"run\":{\r\n                if(commandSelector.length <= 1)\r\n                    tempArr.push(<p>Error Expected Argument run [argument]<br/>â €</p>);\r\n\r\n                else{ \r\n                    tempArr.push(<p>Running Program: {commandSelector[1]} ...<br/>â €</p>);                   \r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"open\":{\r\n                if(commandSelector.length <= 1)\r\n                    tempArr.push(<p>Error Expected Argument open [argument]<br/>â €</p>);\r\n\r\n                else{ \r\n                    tempArr.push(<p>Opening File: {commandSelector[1]} ...<br/>â €</p>);                   \r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                tempArr.push(<p>{parseString()} is not a recognized command</p>);\r\n                tempArr.push(<p>Type \"help\" for list of commands<br/>â €</p>);                \r\n                break;\r\n        }\r\n\r\n        setContent({arr:tempArr});\r\n    }\r\n\r\n    const parseString = (input)=>{\r\n        let bufferIndex = 19;\r\n        if(input !== undefined)\r\n            return input.substring(bufferIndex).replaceAll(\"â–®\",\"\");\r\n        else\r\n            return getTerLine.Value.substring(bufferIndex).replaceAll(\"â–®\",\"\");\r\n    }\r\n\r\n    let timeoutID = setTimeout(() =>{\r\n        document.getElementById(\"command-line\").focus();\r\n        if(getTerLine.blink)\r\n            setTerLine({Value:(getTerLine.Value + \"\").replaceAll(\"â–®\",\"\"),blink:!getTerLine.blink});\r\n        \r\n        else\r\n            setTerLine({Value: getTerLine.Value + (\"â–®\"),blink:!getTerLine.blink});\r\n        \r\n    },800);\r\n\r\n    let num = 0;\r\n    const allTerminalText = (       \r\n        <Fragment>           \r\n            {content.arr.map((item)=>{\r\n                return <Fragment key={num++}>{item}</Fragment>;\r\n            })}\r\n        </Fragment>\r\n    )\r\n\r\n    return (\r\n        <div id=\"main\">\r\n            {allTerminalText}\r\n            <form onSubmit={updateContent}>\r\n                <input id=\"command-line\" type=\"text\"  autoFocus spellCheck=\"false\" autoComplete=\"off\" value={getTerLine.Value} onChange={updateTerminalLine}/>       \r\n            </form>\r\n        </div>\r\n        \r\n    );\r\n\r\n    \r\n}\r\nexport default Terminal;"]},"metadata":{},"sourceType":"module"}
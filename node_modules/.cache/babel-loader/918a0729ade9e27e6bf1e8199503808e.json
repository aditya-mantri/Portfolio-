{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Iliyan\\\\Documents\\\\GitHub\\\\PortfolioWebsite\\\\Front-End\\\\src\\\\Containers\\\\Terminal\\\\Terminal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport './Terminal.css';\n\nconst Terminal = props => {\n  _s();\n\n  const [getTerLine, setTerLine] = useState({\n    Value: \"iliyan@dimitrov:~$ ▮\",\n    blink: true\n  });\n  const [content, setContent] = useState([/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"This is a terminal\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 14\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"interactive Portfolio\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 14\n  }, this)]);\n\n  const updateTerminalLine = e => {\n    clearTimeout(timeoutID);\n    setTerLine({\n      Value: (\"iliyan@dimitrov:~$ \" + e.target.value.substring(19)).replaceAll(\"▮\", \"\"),\n      blink: true\n    });\n  };\n\n  const updateContent = e => {\n    e.preventDefault();\n    clearTimeout(timeoutID);\n    console.log(\"submit\");\n    setTerLine({\n      Value: \"iliyan@dimitrov:~$ \",\n      blink: true\n    });\n    setContent(content.push( /*#__PURE__*/_jsxDEV(\"p\", {\n      children: getTerLine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 39\n    }, this)));\n  };\n\n  let timeoutID = setTimeout(() => {\n    document.getElementById(\"command-line\").focus();\n    if (getTerLine.blink) setTerLine({\n      Value: (getTerLine.Value + \"\").replaceAll(\"▮\", \"\"),\n      blink: !getTerLine.blink\n    });else setTerLine({\n      Value: getTerLine.Value + \"▮\",\n      blink: !getTerLine.blink\n    });\n  }, 800);\n  console.log(content.length());\n\n  const allTerminalText = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: content.map(item => {\n      return item;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    children: [allTerminalText, /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateContent,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"command-line\",\n        type: \"text\",\n        autoFocus: true,\n        spellCheck: \"false\",\n        autoComplete: \"off\",\n        value: getTerLine.Value,\n        onChange: updateTerminalLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Terminal, \"vcpzhvhq3CUMcxVseWjUD5e+7rs=\");\n\n_c = Terminal;\nexport default Terminal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"sources":["C:/Users/Iliyan/Documents/GitHub/PortfolioWebsite/Front-End/src/Containers/Terminal/Terminal.js"],"names":["React","useState","Fragment","Terminal","props","getTerLine","setTerLine","Value","blink","content","setContent","updateTerminalLine","e","clearTimeout","timeoutID","target","value","substring","replaceAll","updateContent","preventDefault","console","log","push","setTimeout","document","getElementById","focus","length","allTerminalText","map","item"],"mappings":"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","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport './Terminal.css'\r\nconst Terminal = (props) => {\r\n    const [getTerLine,setTerLine] = useState({Value:\"iliyan@dimitrov:~$ ▮\",blink:true});\r\n\r\n    const[content,setContent] = useState(\r\n        [\r\n            (<h1>This is a terminal</h1>),\r\n            (<p>interactive Portfolio</p>)\r\n        ]\r\n    );\r\n\r\n    const updateTerminalLine = (e) =>{\r\n        clearTimeout(timeoutID);\r\n        setTerLine({Value:(\"iliyan@dimitrov:~$ \"  + e.target.value.substring(19)).replaceAll(\"▮\",\"\"),blink:true});\r\n      \r\n    }\r\n\r\n    const updateContent =(e) =>{\r\n        e.preventDefault();\r\n        clearTimeout(timeoutID);\r\n        console.log(\"submit\");\r\n        setTerLine({Value:\"iliyan@dimitrov:~$ \",blink:true});\r\n\r\n            setContent(content.push( (<p>{getTerLine}</p>) ));\r\n     \r\n    }\r\n\r\n    \r\n    let timeoutID = setTimeout(() =>{\r\n        document.getElementById(\"command-line\").focus();\r\n        if(getTerLine.blink)\r\n            setTerLine({Value:(getTerLine.Value + \"\").replaceAll(\"▮\",\"\"),blink:!getTerLine.blink});\r\n        \r\n        else\r\n            setTerLine({Value: getTerLine.Value + (\"▮\"),blink:!getTerLine.blink});\r\n        \r\n    },800);\r\n\r\n    console.log(content.length());\r\n    const allTerminalText = (\r\n        \r\n        <Fragment>\r\n\r\n            {content.map((item)=>{\r\n                return item;\r\n            })}\r\n        </Fragment>\r\n    )\r\n\r\n    return (\r\n        <div  id=\"main\">\r\n\r\n            {allTerminalText}\r\n            <form onSubmit={updateContent}>\r\n            <input id=\"command-line\" type=\"text\"  autoFocus spellCheck=\"false\" autoComplete=\"off\" value={getTerLine.Value} onChange={updateTerminalLine}/>       \r\n            </form>\r\n        </div>\r\n        \r\n    );\r\n\r\n    \r\n}\r\nexport default Terminal;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Iliyan\\\\Documents\\\\GitHub\\\\PortfolioWebsite\\\\Front-End\\\\src\\\\Containers\\\\Terminal\\\\Terminal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Terminal.css';\n\nconst Terminal = props => {\n  _s();\n\n  const [getTerLine, setTerLine] = useState({\n    Value: \"iliyan@dimitrov:~$▮\",\n    blink: true\n  });\n\n  const updateTerminalLine = e => {\n    clearTimeout(timeoutID); // if(getTerLine.blink)\n\n    setTerLine({\n      Value: (\"iliyan@dimitrov:~$\" + e.target.value.substring(18)).replaceAll(\"▮\", \"\") + \"▮\",\n      blink: true\n    }); //else\n    //setTerLine({Value:(\"Iliyan Dimitrov:\"  + e.target.value.substring(16)).replace(\"▮\",\"\"),blink:getTerLine.blink});\n  };\n\n  let timeoutID = setTimeout(() => {\n    if (getTerLine.blink) setTerLine({\n      Value: (getTerLine.Value + \"\").replaceAll(\"▮\", \"\"),\n      blink: !getTerLine.blink\n    });else setTerLine({\n      Value: getTerLine.Value + \"▮\",\n      blink: !getTerLine.blink\n    });\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This is a terminal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"interactive Portfolio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"command-line\",\n      type: \"text\",\n      spellCheck: \"false\",\n      value: getTerLine.Value,\n      onChange: updateTerminalLine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Terminal, \"0EI8RaCG08hyBU/RkbXnuRuA4aY=\");\n\n_c = Terminal;\nexport default Terminal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"sources":["C:/Users/Iliyan/Documents/GitHub/PortfolioWebsite/Front-End/src/Containers/Terminal/Terminal.js"],"names":["React","useState","Terminal","props","getTerLine","setTerLine","Value","blink","updateTerminalLine","e","clearTimeout","timeoutID","target","value","substring","replaceAll","setTimeout"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,gBAAP;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,UAAD,EAAYC,UAAZ,IAA0BJ,QAAQ,CAAC;AAACK,IAAAA,KAAK,EAAC,qBAAP;AAA6BC,IAAAA,KAAK,EAAC;AAAnC,GAAD,CAAxC;;AAIA,QAAMC,kBAAkB,GAAIC,CAAD,IAAM;AAC7BC,IAAAA,YAAY,CAACC,SAAD,CAAZ,CAD6B,CAE9B;;AACKN,IAAAA,UAAU,CAAC;AAACC,MAAAA,KAAK,EAAC,CAAC,uBAAwBG,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeC,SAAf,CAAyB,EAAzB,CAAzB,EAAuDC,UAAvD,CAAkE,GAAlE,EAAsE,EAAtE,IAA4E,GAAnF;AAAuFR,MAAAA,KAAK,EAAC;AAA7F,KAAD,CAAV,CAHyB,CAI7B;AACI;AAEP,GAPD;;AAUA,MAAII,SAAS,GAAGK,UAAU,CAAC,MAAK;AAE5B,QAAGZ,UAAU,CAACG,KAAd,EACIF,UAAU,CAAC;AAACC,MAAAA,KAAK,EAAC,CAACF,UAAU,CAACE,KAAX,GAAmB,EAApB,EAAwBS,UAAxB,CAAmC,GAAnC,EAAuC,EAAvC,CAAP;AAAkDR,MAAAA,KAAK,EAAC,CAACH,UAAU,CAACG;AAApE,KAAD,CAAV,CADJ,KAIIF,UAAU,CAAC;AAACC,MAAAA,KAAK,EAAEF,UAAU,CAACE,KAAX,GAAoB,GAA5B;AAAiCC,MAAAA,KAAK,EAAC,CAACH,UAAU,CAACG;AAAnD,KAAD,CAAV;AAEP,GARyB,EAQxB,IARwB,CAA1B;AAWA,sBACI;AAAM,IAAA,EAAE,EAAC,MAAT;AAAA,4BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAO,MAAA,EAAE,EAAC,cAAV;AAAyB,MAAA,IAAI,EAAC,MAA9B;AAAqC,MAAA,UAAU,EAAC,OAAhD;AAAwD,MAAA,KAAK,EAAEH,UAAU,CAACE,KAA1E;AAAiF,MAAA,QAAQ,EAAEE;AAA3F;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CArCD;;GAAMN,Q;;KAAAA,Q;AAsCN,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport './Terminal.css'\r\nconst Terminal = (props) => {\r\n    const [getTerLine,setTerLine] = useState({Value:\"iliyan@dimitrov:~$▮\",blink:true});\r\n\r\n\r\n\r\n    const updateTerminalLine = (e) =>{\r\n        clearTimeout(timeoutID);\r\n       // if(getTerLine.blink)\r\n            setTerLine({Value:(\"iliyan@dimitrov:~$\"  + e.target.value.substring(18)).replaceAll(\"▮\",\"\") + \"▮\",blink:true});\r\n        //else\r\n            //setTerLine({Value:(\"Iliyan Dimitrov:\"  + e.target.value.substring(16)).replace(\"▮\",\"\"),blink:getTerLine.blink});\r\n\r\n    }\r\n\r\n    \r\n    let timeoutID = setTimeout(() =>{\r\n\r\n        if(getTerLine.blink)\r\n            setTerLine({Value:(getTerLine.Value + \"\").replaceAll(\"▮\",\"\"),blink:!getTerLine.blink});\r\n        \r\n        else\r\n            setTerLine({Value: getTerLine.Value + (\"▮\"),blink:!getTerLine.blink});\r\n        \r\n    },1000);\r\n\r\n\r\n    return (\r\n        <div  id=\"main\">\r\n\r\n            <h1>This is a terminal</h1>\r\n            <p>interactive Portfolio</p>\r\n            <input id=\"command-line\" type=\"text\" spellCheck=\"false\" value={getTerLine.Value} onChange={updateTerminalLine}/>       \r\n        </div>\r\n        \r\n    );\r\n\r\n    \r\n}\r\nexport default Terminal;"]},"metadata":{},"sourceType":"module"}